#put write read files
#put a random file, over-write a portion of the random file with another smaller random file using "write", read the same portion of the file with "read", and compare
#the legacy test this is based on did all writes first then reads, but the comparison mechanism was faulty, it also did not save the output of "syndicate-write", so it was unnecessary to make the tests identical
---

- name: setup put_write_read_files
  type: setup
  tmpdirs:
    - name: 028_put_write_read_files
      varname: config_dir
  randnames:
    - test_volume
    - test_rg
    - write_ug
    - read_ug
    - put_filename
  randloop:
    - name: test_filenames
      quantity: 10
  seqloop:
    - name: filenum
      quantity: 10
  valueloop:            # list/dict with the name(s) and value(s) defined below
    - name: test_ranges
      values:
        - offset: 5000
          length: 11000   # 16000 - 5000, 3 blocks, head and tail unaligned
        - offset: 0
          length: 1       # 1 block, tail unaligned
        - offset: 1
          length: 199     # 1 block, unaligned head and tail
        - offset: 0
          length: 4096    # 4 blocks, aligned
        - offset: 0
          length: 8192    # 8 blocks, aligned
        - offset: 0
          length: 1000    # 1 block, tail unaligned
        - offset: 0
          length: 6000    # 2 blocks, tail unaligned
        - offset: 100
          length: 3900    # 4000 - 100,   1 block, head unaligned
        - offset: 5000
          length: 5000    # 10000 - 5000, 2 blocks, head and tail unaligned
        - offset: 4096
          length: 5904    # 10000 - 4096, 2 blocks, tail unaligned
        - offset: 5000
          length: 3192    # 8192 - 5000,  2 blocks, head unalighed
        - offset: 4096
          length: 12738   # 16834 - 4096, 3 blocks, aligned
        - offset: 5000
          length: 11384   # 16384 - 5000, 3 blocks, head unaligned
        - offset: 4096
          length: 11904   # 16000 - 4096, 3 blocks, tail unaligned
  vars:
    - name: syndicate_conf
      value: $config_dir/syndicate.conf
    - name: rg_path
      value: $SYNDICATE_RG_ROOT/syndicate-rg
    - name: rg_driver
      value: $SYNDICATE_PYTHON_ROOT/syndicate/rg/drivers/disk
    - name: put_path
      value: $SYNDICATE_UG_ROOT/syndicate-put
    - name: read_path
      value: $SYNDICATE_UG_ROOT/syndicate-read
    - name: write_path
      value: $SYNDICATE_UG_ROOT/syndicate-write
  debug: off

- name: make local dir structure
  type: sequential
  tasks:
    - name: create /tmp/t028/outfiles
      command: mkdir -p /tmp/t028/outfiles
    - name: create /tmp/t028/infiles
      command: mkdir -p /tmp/t028/infiles

- name: create local file for put
  type: sequential
  tasks:
    - name: make random file
      command: $tasksf_dir/mkfile.py random /tmp/t028/local-putfile 16834

- name: create local files
  type: sequential
  loop_on: filenum
  tasks:
    - name: make random files in the AG dataset path
      command: $tasksf_dir/mkfile.py random /tmp/t028/infiles/$test_filenames[$filenum] $test_ranges[$filenum].length

- name: setup RG
  type: sequential
  tasks:

    - name: setup security config
      command: $SYNDICATE_TOOL --trust_public_key -c "$syndicate_conf" --debug setup "$SYNDICATE_ADMIN" "$SYNDICATE_PRIVKEY_PATH" "$SYNDICATE_MS"

    - name: add test volume config
      command: $SYNDICATE_TOOL -c "$syndicate_conf" create_volume name=$test_volume description="test volume" blocksize=1024 email=$SYNDICATE_ADMIN

    - name: put RG config
      command: $SYNDICATE_TOOL -c "$syndicate_conf" create_gateway name=$test_rg type=RG volume=$test_volume email=$SYNDICATE_ADMIN private_key=auto port=31112

    - name: update RG config
      command: $SYNDICATE_TOOL -c "$syndicate_conf" update_gateway name=$test_rg caps=ALL port=31112 driver=$rg_driver

- name: daemon RG
  type: daemon
  tasks:
    - name: start RG
      command: $rg_path -c "$syndicate_conf" -d2 -f -u $SYNDICATE_ADMIN -v $test_volume -g $test_rg
      exit: 0

- name: check syndicate is mounted
  type: sequential
  tasks:
    - name: wait for RG to be online
      command: $tasksf_dir/waitgateway.py localhost 31112 20
      exit: 0

- name: setup write and read UGs
  type: sequential
  tasks:
    - name: write UG config
      command: $SYNDICATE_TOOL -c "$syndicate_conf" create_gateway name=$write_ug type=UG volume=$test_volume email=$SYNDICATE_ADMIN private_key=auto port=31111

    - name: update write UG config
      command: $SYNDICATE_TOOL -c "$syndicate_conf" update_gateway name=$write_ug caps=ALL
    
    - name: read UG config
      command: $SYNDICATE_TOOL -c "$syndicate_conf" create_gateway name=$read_ug type=UG volume=$test_volume email=$SYNDICATE_ADMIN private_key=auto port=31111

    - name: update read UG config
      command: $SYNDICATE_TOOL -c "$syndicate_conf" update_gateway name=$read_ug caps=ALL

- name: put test file
  type: sequential
  tasks:
    - name: put random file
      command: $put_path -d2 -f -c "$syndicate_conf" -u $SYNDICATE_ADMIN -v $test_volume -g $write_ug /tmp/t028/local-putfile /$put_filename

- name: write and read tests
  type: sequential
  loop_on: filenum
  tasks:
    - name: write random local file over specified range of the put file
      command: $write_path -d3 -f -c "$syndicate_conf" -u $SYNDICATE_ADMIN -v $test_volume -g $write_ug /$put_filename /tmp/t028/infiles/$test_filenames[$filenum] ${test_ranges[$filenum]}.offset
    
    - name: read the same range from the put file
      command: $read_path -d2 -f -c "$syndicate_conf" -u $SYNDICATE_ADMIN -v $test_volume -g $read_ug /$put_filename ${test_ranges[$filenum]}.offset ${test_ranges[$filenum]}.length
      rangecheckout: /tmp/t028/infiles/$test_filenames[$filenum] 0 ${test_ranges[$filenum]}.length
